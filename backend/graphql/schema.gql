# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  id: Int!
  name: String!
  created_at: DateTime!
  updated_at: DateTime!
  product: [Product!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: Int!
  email: String!
  password: String!
  firstname: String!
  lastname: String!
  address: String!
  phoneNumber: String!
  role: Role!
  created_at: DateTime!
  updated_at: DateTime!
  order: [Order!]!
}

enum Role {
  CUSTOMER
  ADMIN
}

type Order {
  id: Int!
  user: User!
  product: Product!
  prodAmount: Int!
  totalPrice: Float!
  receiptURL: String!
  status: Order_Status!
  created_at: DateTime!
  updated_at: DateTime!
}

enum Order_Status {
  AWAITING
  PENDING
  SUCCESS
  UNSUCCESS
}

type Product {
  id: Int!
  category: Category!
  name: String!
  desc: String
  price: Float!
  picURL: String
  created_at: DateTime!
  updated_at: DateTime!
  order: [Order!]!
  stock: Int!
}

type Query {
  users: [User!]!
  user(id: Int!): User!
  email(loginUserInput: LoginUserInput!): User!
  orders: [Order!]!
  order(id: Int!): Order!
  products: [Product!]!
  product(id: Int!): Product!
<<<<<<< HEAD
  categories: [Category!]!
  category(id: Int!): Category!
}

input LoginUserInput {
  email: String!
  password: String!
=======
  users: [User!]!
  user(id: Int!): User!
  email(email: String!): User!
  categories: [Category!]!
  category(id: Int!): Category!
>>>>>>> BE-Aggregation
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): String!
  createOrder(createOrderInput: CreateOrderInput!): Order!
  updateOrder(updateOrderInput: UpdateOrderInput!): Order!
  removeOrder(id: Int!): Order!
  createProduct(createProductInput: CreateProductInput!): Product!
  updateProduct(updateProductInput: UpdateProductInput!): Product!
  removeProduct(id: Int!): String!
<<<<<<< HEAD
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  removeCategory(id: Int!): Category!
  login(loginUserInput: LoginUserInput!): String!
}

input CreateUserInput {
  email: String!
  password: String!
  firstname: String!
  lastname: String!
  address: String!
  phoneNumber: String!
  role: Role!
}

input UpdateUserInput {
  email: String
  password: String
  firstname: String
  lastname: String
  address: String
  phoneNumber: String
  role: Role
  id: Int!
=======
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): String!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  removeCategory(id: Int!): Category!
>>>>>>> BE-Aggregation
}

input CreateOrderInput {
  userId: Int!
  productId: Int!
  prodAmount: Int!
  receiptURL: String
}

input UpdateOrderInput {
  userId: Int
  productId: Int
  prodAmount: Int
  receiptURL: String
  id: Int!
}

input CreateProductInput {
  name: String!
  categoryId: Int!
  desc: String
  price: Float!
  picURL: String
}

input UpdateProductInput {
  name: String
  categoryId: Int
  desc: String
  price: Float
  picURL: String
  id: Int!
}

<<<<<<< HEAD
=======
input CreateUserInput {
  email: String!
  password: String!
  firstname: String!
  lastname: String!
  address: String!
  phoneNumber: String!
  role: Role!
}

input UpdateUserInput {
  email: String
  password: String
  firstname: String
  lastname: String
  address: String
  phoneNumber: String
  role: Role
  id: Int!
}

>>>>>>> BE-Aggregation
input CreateCategoryInput {
  name: String!
}

input UpdateCategoryInput {
  name: String
  id: Int!
}
